//========================================
// 
// サンプル
// Author:RIKU NISHIMURA
// 
//========================================
#include "RNlib.h"	// #RNLib.hをインクルードすれば、RNLibにおける全ての機能が使用可能

//****************************************
// 目次(検索用)
//****************************************
// ----------------------------------------
// ■描画について
// ----------------------------------------
// ■リソースの読み込みについて ＆ 対応リソース一覧
// □セットアップ3Dとは？
// □モーション3Dとは？
// □レール3Dとは？
// ----------------------------------------
// ■オブジェクトクラスについて
// ■RNLibのオブジェクトクラス一覧
// ----------------------------------------

//========================================
// Sample
//========================================
void Sample(void) {

	Pos3D   pos;
	Rot3D   rot;
	Scale3D scale;
	Matrix  mtx;
	Color   col;

	//================================================================================================================================================================
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	//================================================================================================================================================================

	//****************************************
	// ■描画について
	//****************************************
	// ・主な描画オブジェクトはPut関数で指定します。
	//   Putすることで、"そのフレームに指定した描画"が行われます。
	// 
	// ・継続的に描画し続ける為には、
	//   更新処理などで毎フレーム呼びましょう。

	//================================================================================================================================================================
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	//================================================================================================================================================================

	//****************************************
	// ■リソースの読み込みについて ＆ 対応リソース一覧
	//****************************************
	// ・主にリソースの指定はIdxで行われます。
	//   Idxは読み込みの際にshort型で取得することが出来ます。
	//   (一部例外あり)
	// 
	// ・同じパスでの読み込みが行われた際は、最初と同じIdxを返しますが、
	//   毎フレーム同じパスで読み込み続けたりすれば、普通に処理が重くなりますので、
	//   使用する際は、以下のような対応を推奨します。
	// 
	//   - コンストラクタや初期処理で保存しておく。
	//   - 特定の場所でIdxを一括管理する。

	// 対応リソース)
	short setUp3DIdx  = RNLib::SetUp3D().Load("path");
	short motion3DIdx = RNLib::Motion3D().Load("path");
	CRail3D rail3D("path");

	//****************************************
	// □セットアップ3Dとは？
	//****************************************
	// ・SETUP3D_EDITORモードを開くことで、データの作成が可能です。
	//
	// ・ボーンやフェイスの1つの構成情報です。
	// 
	// ・ボーンはモデルなどの見た目を設定することが可能で、
	//   人型ロボットのような、パーツ分けされたモデルを組み立てることが出来ます。
	// 
	// ・フェイスは4つの頂点に追従する1毎のポリゴンで、
	//   ボーン同士を繋ぎ合わせ、見た目を滑らかにすることが可能です。
	//
	// ・あくまで構成情報なので、プログラム上で出現させるには、
	//   ドール3Dクラスを作成し、Idxを渡す必要があります。

	//****************************************
	// □モーション3Dとは？
	//****************************************
	// ・SETUP3D_EDITORモードを開くことで、データの作成が可能です。
	// 
	// ・ドール3Dの一連の動きの情報です。
	// 
	// ・ドール3DクラスのSetMotion関数にIdxを渡し、動きを実行させることが可能です。

	//****************************************
	// □レール3Dとは？
	//****************************************
	// ・RAIL3D_EDITORモードを開くことで、データの作成が可能です。
	// 
	// ・複数のポイントで形成された曲線の情報です。
	// 
	// ・データが読み込まれたレール3Dクラスに対し、
	//   GetMtx関数に0から1の割合を渡すことで、
	//   割合に基づいた曲線上のマトリックスを取得することが可能です。
	{
		// ※こうすることで、曲線上の始点から40％先のマトリックスを取得出来ます。
		mtx = rail3D.GetMtx(0.4f);
	}

	//================================================================================================================================================================
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	//================================================================================================================================================================

	//****************************************
	// ■オブジェクトクラスについて
	//****************************************
	// ・オブジェクトクラス(CObject)とは、
	//   オブジェクトマネージャー(CObjectMgr)に管理されることを前提とした
	//   純粋仮想基底クラスです。
	// 
	// ・オブジェクトマネージャーに追加したクラスはリスト構造に組み込まれ、
	//   更新関数などが"自動で"呼ばれます。
	// 
	// ・new     で雑に作成し、
	//   Delete()で雑に破棄できます。

	{// 使用例)
		// ・エネミーマネージャーを定義します。
		//   コンストラクタに必要な名称は、
		//   デバッグログでマネージャーの使用状況を確認するのに役立てられます。
		CObjectMgr enemyMgr("EnemyMgr");

		// ・基本マネージャーに対して何か行う必要はありません。
		//   但し、窓口は用意する必要があります。
		// 例)
		// CObjectMgr& GetObjectMgr(void) { return enemyMgr; }

		// ・オブジェクトクラスを継承したエネミークラスを定義します。
		class CBlock : public CObject {
		public:
			CBlock() {
				// 所属するマネージャーに窓口からアクセスし、自身を追加(必須)
				//GetEnemyMgr().AddList(this);
			}
			~CBlock() {
				// 所属するマネージャーに窓口からアクセスし、自身を削除(必須)
				//GetEnemyMgr().SubList(this);
			}
		private:
			// ・更新処理(必須)
			//   マネージャー意外から呼ぶことはない為、privateに宣言してください。
			void Update(void) {}
		};

		{// ( 動的に作成する場合 )
			CBlock* block;

			block = new CBlock;

			// 任意のタイミングで削除
			block->Delete();
		}

		{// ( 静的に作成する場合 )
			CBlock block;

			// 自動で削除される
		}

		{// ( マネージャーに属するオブジェクト1つ1つに処理を行う場合 )

			CBlock* block = NULL;
			while (enemyMgr.ListLoop(&block)) {

				// ( blockに対する適切な処理 )
			}
		}
	}
	// ・また、以下のRNLib内で定義されているオブジェクトクラスは、全て既定のオブジェクトマネージャーによって管理されています。
	
	//****************************************
	// ■RNLibのオブジェクトクラス一覧
	//****************************************

	{// [ ドール3Dクラス ]
		// ・セットアップ3DのIdxを渡すことで、その実態を写すことが目的です。
		//   主に、キャラクタやステージオブジェクトなどのメンバ変数などに持たせ、
		//   毎フレーム情報を更新するなどして、操り人形のように扱います。

		// コンストラクタにプライオリティとセットアップ3DのIdxを渡す
		CDoll3D doll(0, RNLib::SetUp3D().Load("path"));

		// ・位置を渡すことで始めてその場所に現れます。
		doll.SetPos(INITPOS3D);

		// ・モーションのIdxを設定することで、 そのモーションを実行させる事が可能です。
		doll.SetMotion(RNLib::Motion3D().Load("path"));

		// ・その他、様々なパラメータを設定出来ます。
		doll.SetPos   (pos);
		doll.SetRot   (rot);
		doll.SetScale (scale);
		doll.SetCol   (col);
		doll.SetIsShow(true);	// 表示するかどうか
	}

	//================================================================================================================================================================
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	//================================================================================================================================================================
}