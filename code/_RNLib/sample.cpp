//========================================
// 
// サンプル
// Author:RIKU NISHIMURA
// 
//========================================
#include "RNlib.h"	// #RNLib.hをインクルードすれば、RNLibにおける全ての機能が使用可能

//****************************************
// 目次(検索用)
//****************************************
// ※"■"は特に重要な項目です
// -----[[[ リソース ]]]-------------------
// ■リソースの読み込みについて ＆ 対応リソース一覧
// □セットアップ3Dとは？
// □モーション3Dとは？
// □レール3Dとは？
// -----[[[ 描画 ]]]-----------------------
// ■カメラについて
// ■描画について
// □ポリゴン2D
// □ポリゴン3D
// □モデル
// □テキスト2D
// □テキスト3D
// -----[[[ オブジェクトクラス ]]]---------
// ■オブジェクトクラスについて
// ■RNLibのオブジェクトクラス一覧
// -----[[[ 計算 ]]]-----------------------
// □イージング
// □幾何学計算
// □マトリックス
// □数値
// -----[[[ その他型一覧 ]]]-----------------------
// □Color型
// □String型
// ----------------------------------------

//========================================
// Sample
//========================================
void Sample(void) {

	// ※説明用変数
	Pos3D    pos3D;
	Rot3D    rot3D;
	Scale3D  scale3D;
	Vector3D vec3D;
	Normal3D nor3D;
	Pos2D    pos2D;
	Angle    angle;
	Scale2D  scale2D;
	Matrix   mtx;
	Color    col;
	float    rate;

	//================================================================================================================================================================
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	// リソース
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	//================================================================================================================================================================

	//****************************************
	// ■リソースの読み込みについて ＆ 対応リソース一覧
	//****************************************
	// ・主にリソースの指定はIdxで行われます。
	//   Idxは読み込みの際にshort型で取得することが出来ます。
	//   (一部例外あり)
	// 
	// ・同じパスでの読み込みが行われた際は、最初と同じIdxを返しますが、
	//   毎フレーム同じパスで読み込み続けたりすれば、普通に処理が重くなりますので、
	//   使用する際は、以下のような対応を推奨します。
	// 
	//   - コンストラクタや初期処理で保存しておく。
	//   - 特定の場所でIdxを一括管理する。

	// 対応リソース)
	short texIdx      = RNLib::Texture ().Load("path");
	short modelIdx    = RNLib::Model   ().Load("path");
	short soundIdx    = RNLib::Sound   ().Load("path");
	short setUp3DIdx  = RNLib::SetUp3D ().Load("path");
	short motion3DIdx = RNLib::Motion3D().Load("path");
	CRail3D rail3D("path");

	//****************************************
	// □セットアップ3Dとは？
	//****************************************
	// ・SETUP3D_EDITORモードを開くことで、データの作成が可能です。
	//
	// ・ボーンやフェイスの1つの構成情報です。
	// 
	// ・ボーンはモデルなどの見た目を設定することが可能で、
	//   人型ロボットのような、パーツ分けされたモデルを組み立てることが出来ます。
	// 
	// ・フェイスは4つの頂点に追従する1毎のポリゴンで、
	//   ボーン同士を繋ぎ合わせ、見た目を滑らかにすることが可能です。
	//
	// ・あくまで構成情報なので、プログラム上で出現させるには、
	//   ドール3Dクラスを作成し、Idxを渡す必要があります。

	//****************************************
	// □モーション3Dとは？
	//****************************************
	// ・SETUP3D_EDITORモードを開くことで、データの作成が可能です。
	// 
	// ・ドール3Dの一連の動きの情報です。
	// 
	// ・ドール3DクラスのSetMotion関数にIdxを渡し、動きを実行させることが可能です。

	//****************************************
	// □レール3Dとは？
	//****************************************
	// ・RAIL3D_EDITORモードを開くことで、データの作成が可能です。
	// 
	// ・複数のポイントで形成された曲線の情報です。
	// 
	// ・データが読み込まれたレール3Dクラスに対し、
	//   GetMtx関数に0から1の割合を渡すことで、
	//   割合に基づいた曲線上のマトリックスを取得することが可能です。
	{
		// ※こうすることで、曲線上の始点から40％先のマトリックスを取得出来ます。
		mtx = rail3D.GetMtx(0.4f);
	}

	//================================================================================================================================================================
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	// 描画
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	//================================================================================================================================================================

	//****************************************
	// ■カメラについて
	//****************************************
	// ・カメラは「実空間」にある描画オブジェクトを写し出します。
	// 
	// ・カメラのインスタンスを生成し、
	//   コンストラクタで領域の幅と高さを指定する必要があります。

	CCamera camera(Size2D(1280.0f, 720.0f));

	// ・カメラを生成しただけではスクリーンには何も描画されません。
	//   カメラはあくまで、写された情報を内部テクスチャに描画しています。
	//   スクリーンに表示する為には、以下のように
	//   カメラをテクスチャとして貼り付けた描画オブジェクトを
	//   「スクリーン空間」に配置する必要があります。

	// ・スクリーン空間にカメラのビュー情報をテクスチャとして貼りつけた
	//   ポリゴン2Dを描画する例です。
	RNLib::Polygon2D().Put(0, Pos2D(640.0f, 360.0f), 0.0f, true)
		->SetSize(Size2D(1280.0f, 720.0f))
		->SetTex(&camera);

	// ・基本的に描画オブジェクトのPut関数の引数には、
	//   スクリーン空間に描画するかのフラグが設定されています。(デフォルトはFALSE)
	
	// ・このように「スクリーン空間」「実空間」という2つの空間が存在し、描画が成り立ちます。
	//   - スクリーン空間…
	//     デフォルトで映し出されます。
	//     プライオリティ範囲は8で固定です。
	//     視点位置はPos3D(0.0f, 0.0f, 0.0f)で固定されており、Pos3D(0.0f, 0.0f, 1.0f)を見つめています。
	//   - 実空間…
	//     カメラによってのみ映し出されます。
	//     プライオリティ範囲はMainLoop関数で指定可能です。

	//****************************************
	// ■描画について
	//****************************************
	// ・主な描画オブジェクトはPut関数で指定します。
	//   Putすることで、"そのフレームに指定した描画"が行われます。
	// 
	// ・継続的に描画し続ける為には、
	//   更新処理などで毎フレーム呼びましょう。

	//****************************************
	// □ポリゴン2D
	//****************************************

	// 幅と高さが16のポリゴン2Dを指定したプライオリティ/位置/角度に出す
	RNLib::Polygon2D().Put(0, pos2D, angle)
		->SetSize(Size2D(16.0f, 16.0f));

	// 幅と高さが16のポリゴン2Dを頂点位置を直接指定で出す
	RNLib::Polygon2D().Put(0)
		->SetVtxPos(Pos2D(-8.0f, -8.0f), Pos2D(8.0f, -8.0f), Pos2D(-8.0f, 8.0f), Pos2D(8.0f, 8.0f));

	// その他、様々なオプションを設定可能
	RNLib::Polygon2D().Put(0, pos2D, angle)
		->SetCol(col)					// ・色を設定
		->SetVtxCol(col, col, col, col)	// ・色を頂点毎に直接指定
		->SetTex(texIdx)				// ・テクスチャを貼る
		->SetTex(texIdx, 3, 4, 8)		// ・テクスチャを貼る(パターン番号を指定)
										// ・テクスチャを貼る(テクスチャ座標を頂点毎に直接指定)
		->SetTex(texIdx, Pos2D(0.0f, 0.0f), Pos2D(1.0f, 0.0f), Pos2D(0.0f, 1.0f), Pos2D(1.0f, 1.0f))
		->SetTex(&camera)				// ・カメラのビュー情報をテクスチャとして貼る
		->SetTexMirrorX(true)			// ・テクスチャのX反転
		->SetTexMirrorY(true)			// ・テクスチャのY反転
										// ・テクスチャ補間モード設定
		->SetInterpolationMode(INTERPOLATION_MODE::LINEAR)
		;

	//****************************************
	// □ポリゴン3D
	//****************************************

	// 幅と高さが16のポリゴン3Dを指定したプライオリティ/位置/向きに出す
	RNLib::Polygon3D().Put(0, pos3D, rot3D)
		->SetSize(Size2D(16.0f, 16.0f));

	// 上と意味は同じ
	RNLib::Polygon3D().Put(0, pos3D, rot3D)
		->SetVtxPos(Pos3D(-8.0f, 8.0f, 0.0f), Pos3D(8.0f, 8.0f, 0.0f), Pos3D(-8.0f, -8.0f, 0.0f), Pos3D(8.0f, -8.0f, 0.0f));

	// その他、様々なオプションを設定可能
	RNLib::Polygon3D().Put(0, mtx)		// ※マトリックスで指定することも可能
		->SetClippingCamera(camera)		// ・特定のカメラにのみ描画設定
		->SetCol(col)					// ・色を設定
		->SetVtxCol(col, col, col, col)	// ・色を頂点毎に直接指定
		->SetTex(texIdx)				// ・テクスチャを貼る
		->SetTex(texIdx, 3, 4, 8)		// ・テクスチャを貼る(パターン番号を指定)
										// ・テクスチャを貼る(テクスチャ座標を頂点毎に直接指定)
		->SetTex(texIdx, Pos2D(0.0f, 0.0f), Pos2D(1.0f, 0.0f), Pos2D(0.0f, 1.0f), Pos2D(1.0f, 1.0f))
		->SetTex(&camera)				// ・カメラのビュー情報をテクスチャとして貼る
		->SetTexMirrorX(true)			// ・テクスチャのX反転
		->SetTexMirrorY(true)			// ・テクスチャのY反転
		->SetLighting(true)				// ・ライティング設定
		->SetBillboard(true)			// ・ビルボード設定
										// ・カリングモード設定
		->SetCullingMode(CULLING_MODE::FRONT_SIDE)
		// ・アルファブレンドモード設定
		->SetAlphaBlendMode(ALPHA_BLEND_MODE::NORMAL)
		// ・テクスチャ補間モード設定
		->SetInterpolationMode(INTERPOLATION_MODE::LINEAR)
		;

	//****************************************
	// □モデル
	//****************************************

	// モデルを指定したモデル番号/プライオリティ/位置/向き/拡大倍率で出す
	RNLib::Model().Put(0, modelIdx, pos3D, rot3D, scale3D);

	// 様々なオプションを設定可能
	RNLib::Model().Put(0, modelIdx, mtx)
		->SetClippingCamera(camera)		// ・特定のカメラにのみ描画設定
		->SetCol(col)					// ・色設定
		->SetTex(texIdx)				// ・テクスチャ設定
		->SetZTest(true)				// ・Zテスト設定
		->SetLighting(true)				// ・ライティング設定
		->SetOutLineIdx(5)				// ・輪郭線のIdxを設定
		->SetBrightnessOfEmissive(0.5f)	// ・発光部分の明るさ倍率を設定
										// ・テクスチャ補間モード設定
		->SetInterpolationMode(INTERPOLATION_MODE::LINEAR)
		;

	//****************************************
	// □テキスト2D
	//****************************************

	//****************************************
	// □テキスト3D
	//****************************************

	//================================================================================================================================================================
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	// オブジェクトクラス
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	//================================================================================================================================================================

	//****************************************
	// ■オブジェクトクラスについて
	//****************************************
	// ・オブジェクトクラス(CObject)とは、
	//   オブジェクトマネージャー(CObjectMgr)に管理されることを前提とした
	//   純粋仮想基底クラスです。
	// 
	// ・オブジェクトマネージャーに追加したクラスはリスト構造に組み込まれ、
	//   更新関数などが"自動で"呼ばれます。
	// 
	// ・new     で雑に作成し、
	//   Delete()で雑に破棄できます。

	{// 使用例)
		// ・エネミーマネージャーを定義します。
		//   コンストラクタに必要な名称は、
		//   デバッグログでマネージャーの使用状況を確認するのに役立てられます。
		CObjectMgr enemyMgr("EnemyMgr");

		// ・基本マネージャーに対して何か行う必要はありません。
		//   但し、窓口は用意する必要があります。
		// 例)
		// CObjectMgr& GetObjectMgr(void) { return enemyMgr; }

		// ・オブジェクトクラスを継承したエネミークラスを定義します。
		class CBlock : public CObject {
		public:
			CBlock() {
				// 所属するマネージャーに窓口からアクセスし、自身を追加(必須)
				//GetEnemyMgr().AddList(this);
			}
			~CBlock() {
				// 所属するマネージャーに窓口からアクセスし、自身を削除(必須)
				//GetEnemyMgr().SubList(this);
			}
		private:
			// ・更新処理(必須)
			//   マネージャー意外から呼ぶことはない為、privateに宣言してください。
			void Update(void) {}
		};

		{// ( 動的に作成する場合 )
			CBlock* block;

			block = new CBlock;

			// 任意のタイミングで削除
			block->Delete();
		}

		{// ( 静的に作成する場合 )
			CBlock block;

			// 自動で削除される
		}

		{// ( マネージャーに属するオブジェクト1つ1つに処理を行う場合 )

			CBlock* block = NULL;
			while (enemyMgr.ListLoop(&block)) {

				// ( blockに対する適切な処理 )
			}
		}
	}
	// ・また、以下のRNLib内で定義されているオブジェクトクラスは、全て既定のオブジェクトマネージャーによって管理されています。

	//****************************************
	// ■RNLibのオブジェクトクラス一覧
	//****************************************

	{// [ ドール3Dクラス ]
		// ・セットアップ3DのIdxを渡すことで、その実態を写すことが目的です。
		//   主に、キャラクタやステージオブジェクトなどのメンバ変数などに持たせ、
		//   毎フレーム情報を更新するなどして、操り人形のように扱います。

		// コンストラクタにプライオリティとセットアップ3DのIdxを渡す
		CDoll3D doll(0, RNLib::SetUp3D().Load("path"));

		// ・位置を渡すことで始めてその場所に現れます。
		doll.SetPos(INITPOS3D);

		// ・モーションのIdxを設定することで、 そのモーションを実行させる事が可能です。
		doll.SetMotion(RNLib::Motion3D().Load("path"));

		// ・その他、様々なパラメータを設定出来ます。
		doll.SetPos(pos3D);
		doll.SetRot(rot3D);
		doll.SetScale(scale3D);
		doll.SetCol(col);
		doll.SetIsShow(true);	// 表示するかどうか
	}

	// [ カメラクラス ]
	// ・詳しい内容は"カメラについて"を参照してください。

	//================================================================================================================================================================
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	// 計算
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	//================================================================================================================================================================

	// ※説明用変数
	Pos3D    resultPos, posA, posB, pointA1, pointA2, pointB1, pointB2;
	Rot3D    resultRot;
	Vector3D resultVec;
	Scale3D  resultScale;
	int      resultInt;
	float    resultDistance, resultAngle, resultFloat, angleA, angleB, floatNum, floatA, floatB;
	Matrix   resultMtx, parentMtx, childMtx;

	//****************************************
	// □イージング
	//****************************************
	// ・アニメーションや遷移などでオブジェクトの動きを自然なものにするために使用される関数です。
	//   オブジェクトが始点から終点に移動する際の速度や加速度を制御し、滑らかな動きを生み出す役割があります。
	// ・対応しているイージングの種類は以下の通りです。

	EASE_TYPE::LINEAR;		// 線形
	EASE_TYPE::IN_SINE;		// 加速
	EASE_TYPE::OUT_SINE;	// 減速
	EASE_TYPE::INOUT_SINE;	// 加減速

	// ・引数にベース値と最大値を渡すことで、
	//   ベース値の最大値に対する0から1の割合を返します。
	rate = RNLib::Ease().Easing(EASE_TYPE::IN_SINE, 30, 60);
	rate = RNLib::Ease().Easing(EASE_TYPE::IN_SINE, 0.5f, 1.0f);

	//****************************************
	// □幾何学計算
	//****************************************
	// ・位置、向き、ベクトル、距離、法線などの計算に役立ちます。
	//   主な内容は以下の通りです。
	{
		// ・位置Aから位置Bまでの距離を調べます。
		resultDistance = RNLib::Geometry().FindDistance(posA, posB);
		resultDistance = RNLib::Geometry().FindDistanceXY(posA, posB);	// (XY平面のみ)
		resultDistance = RNLib::Geometry().FindDistanceXZ(posA, posB);	// (XZ平面のみ)

		// ・位置Aから位置Bまでの角度を調べます。
		resultAngle = RNLib::Geometry().FindAngleXY(posA, posB);	// (XY平面のみ)
		resultAngle = RNLib::Geometry().FindAngleXZ(posA, posB);	// (XZ平面のみ)

		// ・位置Aから位置Bまでの向きを調べます。
		resultRot = RNLib::Geometry().FindRot(posA, posB);

		// ・直線Aと直線Bの交点座標を調べます。
		resultPos = RNLib::Geometry().FindIntersectionXZ(pointA1, pointA2, pointB1, pointB2);	// (XZ平面のみ)

		// ・角度Aから角度Bまでの角度差を調べます。
		resultAngle = RNLib::Geometry().FindAngleDifference(angleA, angleB);

		// ・向きのベクトルを調べます。
		resultVec = RNLib::Geometry().FindRotVec(rot3D);

		// ・ベクトルの向きを調べます。
		resultRot = RNLib::Geometry().FindVecRot(vec3D);

		// ・ランダムなベクトルを返します。
		resultVec = RNLib::Geometry().GetRandomVec();
	}

	//****************************************
	// □マトリックス
	//****************************************
	// ・マトリックスからの要素の抽出、変換などに役立ちます。
	//   主な内容は以下の通りです。
	{
		// ・位置/向き/拡大倍率/法線などをマトリックスに変換します。
		mtx = RNLib::Matrix().ConvPosToMtx(pos3D);
		mtx = RNLib::Matrix().ConvRotToMtx(rot3D);
		mtx = RNLib::Matrix().ConvPosRotToMtx(pos3D, rot3D);
		mtx = RNLib::Matrix().ConvPosNorToMtx(pos3D, nor3D);
		mtx = RNLib::Matrix().ConvPosRotScaleToMtx(pos3D, rot3D, scale3D);

		// ・マトリックスから位置/向き/拡大倍率/法線に変換します。
		resultPos = RNLib::Matrix().ConvMtxToPos(mtx);
		resultRot = RNLib::Matrix().ConvMtxToRot(mtx);
		resultVec = RNLib::Matrix().ConvMtxToRotVec(mtx);
		resultScale = RNLib::Matrix().ConvMtxToScale(mtx);

		// ・親マトリックスと子マトリックスを掛け合わせた結果を返します。
		resultMtx = RNLib::Matrix().MultiplyMtx(parentMtx, childMtx);
	}

	//****************************************
	// □数値
	//****************************************
	// ・数値の制御、乱数の取得など、数値に対する様々な処理に役立ちます。
	//   主な内容は以下の通りです。
	{
		// ・与えた値を範囲内に制御する
		RNLib::Number().Clamp(&floatNum, 15.0f, 60.0f);

		// ・与えた値を範囲内にループ制御する
		RNLib::Number().Clamp(&floatNum, 15.0f, 60.0f);

		// ・与えた最大値までの範囲のランダムな整数値を取得
		resultInt = RNLib::Number().GetRandomInteger(30);

		// ・与えた最大値までの範囲のランダムな小数値を取得
		resultFloat = RNLib::Number().GetRandomFloat(10.0f);

		// ・与えた0から1の確率の割合で抽選を行い、当たればTRUEを返します。
		if (RNLib::Number().Lottery(0.25f)) {
			// 25%の抽選に当たった
		}

		// ・与えた複数の値をランダムに返す
		resultInt = RNLib::Number().OR({ 7, 10, 15 });
		resultFloat = RNLib::Number().OR({ 80.0f, 70.0f,40.0f, 20.0f });

		// ・与えた値に基づいて正負の1を返す
		resultFloat = RNLib::Number().GetPlusMinus(-10.0f);	// 結果:-1
		resultFloat = RNLib::Number().GetPlusMinus(5);		// 結果:1

		// ・与えた値が最大値に対して折り返した数を取得
		resultInt = RNLib::Number().GetTurnNum(8, 5);	// 結果:2
		resultInt = RNLib::Number().GetTurnNum(13, 5);	// 結果:3

		// ・小数値Aと小数値Bの等価比較(演算誤差の対策。許容値を直接していすることも可能。)
		if (RNLib::Number().GetIsEq(floatA, floatB)) {
			// A == B
		}

		if (RNLib::Number().GetIsNoEq(floatA, floatB)) {
			// A != B
		}

		if (RNLib::Number().GetIsGtOrEq(floatA, floatB)) {
			// A >= B
		}

		if (RNLib::Number().GetIsGt(floatA, floatB)) {
			// A > B
		}

		if (RNLib::Number().GetIsLsOrEq(floatA, floatB)) {
			// A <= B
		}

		if (RNLib::Number().GetIsLs(floatA, floatB)) {
			// A < B
		}

		// 小数値を与えた間隔値に繰り上げ/繰り下げして返す。
		resultFloat = RNLib::Number().RoundUpFloat  (0.976f, 0.1f);	// 結果:1.0
		resultFloat = RNLib::Number().RoundDownFloat(0.976f, 0.1f);	// 結果:0.9
	}

	//================================================================================================================================================================
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	// その他型一覧
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	//================================================================================================================================================================

	//****************************************
	// □Color型
	//****************************************
	// ・RNライブラリの関数における色の指定には、全てこの型が用いられます。
	//   0から255のR,G,B,Aの4つの要素で構成されています。
	//   D3DCOLOR D3DXCOLOR D3DCOLORVALUEへの代入に対応しています。
	Color color;

	// 赤色を指定
	color = Color(255, 0, 0, 255);

	//****************************************
	// □String型
	//****************************************
	// ・文字列を扱う際に、確保や解放などの処理を自動で行います。
	//   char*への代入に対応しています。
	String string;

	// 文字列を代入
	string = "Test";

	// %指定子を使用した代入
	string = String("%d-%.1f", 7, 15.375f);	// 結果:7-15.3

	//================================================================================================================================================================
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	//================================================================================================================================================================
}