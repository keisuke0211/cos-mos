//========================================
// 
// 当たり判定の処理
// Author:RIKU NISHIMURA
// 
//========================================
#include "../../RNlib.h"

//================================================================================
//----------|---------------------------------------------------------------------
//==========| [公開]当たり判定クラス
//----------|---------------------------------------------------------------------
//================================================================================

//========================================
// コンストラクタ
//========================================
_RNC_HitTest::_RNC_HitTest() {

}

//========================================
// デストラクタ
//========================================
_RNC_HitTest::~_RNC_HitTest() {

}

//========================================
// 初期化処理
//========================================
void _RNC_HitTest::Init(void) {

}

//========================================
// 終了処理
//========================================
void _RNC_HitTest::Uninit(void) {

}

//========================================
// 更新処理
//========================================
void _RNC_HitTest::Update(void) {

}

//================================================================================
//----------|---------------------------------------------------------------------
//==========| [公開]当たり判定クラス(XZ平面)
//----------|---------------------------------------------------------------------
//================================================================================

//========================================
// 点から矩形の重なり判定
//========================================
bool _RNC_HitTest::XZ_OverlapPointToSquare(const Pos3D& basePos, const Pos3D& targetPos, const Scale2D& targetScale) {

	const float targetWidthHalf = targetScale.x * 0.5f;
	const float targetDepthHalf = targetScale.y * 0.5f;
	const float targetFront = targetPos.z - targetDepthHalf;
	const float targetBack  = targetPos.z + targetDepthHalf;
	const float targetLeft  = targetPos.x - targetWidthHalf;
	const float targetRight = targetPos.x + targetWidthHalf;

	if (basePos.x >= targetLeft && basePos.x <= targetRight &&
		basePos.z >= targetFront && basePos.z <= targetBack) {
		return true;
	}

	return false;
}